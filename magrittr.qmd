# Ceci n'est pas qu'un opérateur : `%>%` et `magrittr`

## L'opérateur pipe %>%

L'opérateur pipe permet de passer, de gauche à droite, le résultat d'une fonction à une seconde fonction, puis à une troisième. Ce pipe est détaillé dans un chapitre mais sa compréhension devrait être intuitive.

Comparez par exemple ces deux lignes pourtant strictement équivalentes :

{r}
library(magrittr)
plot(sqrt(sample(seq(1:100), 6)))              # road to burnout
seq(1:100) %>% sample(6) %>% sqrt() %>% plot() # let's breathe

Les packages du R moderne, en premier lieu ceux du tidyverse en ont fait une idée centrale de leur design et il est peu dire que nous autres mortel·le·s en profitons tous les jours.

Il est peu dire que cet opérateur[^pipe] a révolutionné R, lorsqu'il y a été importé, d'abord dans le package `magrittr` sous sa forme `%>%`. Il est désormais inclus dans le R de "base" sous sa forme `|>` mais nous n'utiliserons que la version historique `%>%`, que je trouve plus lisible, plus facile à taper (`<Maj> + <Ctrl/Cmd> + <M>` dans RStudio) et parce que les années aidant, je deviens conservateur.

[^pipe]: À prononcer à l'anglaise hein : "payeupeu"

L'idée du pipe est issue de la composition de fonctions en mathématiques. Plutôt que d'écrire :

`h(g(f(x)))` on peut déplier cet emboitement de fonctions et écrire `(h ∘ g ∘ f)(x)`

En langage R, plutôt que d'écrire `h(g(f(x)))` on écrira : `x %>% f() %>% g() %>% h()`[^pipe2]. Cette écriture est non seulement plus lisible mais elle se lit également de gauche à droite, dans le sens conventionnel de notre partie du monde.

[^pipe2]: Vous pouvez également omettre les parenthèses si vos fonctions sont passées sans argument.


## `%>%` vs `|>`

D'abord introduit par le package `magrittr` le forward pipe est désormais dans le R "de base" depuis la [version 4.1.0](https://cran.r-project.org/doc/manuals/r-devel/NEWS.html).

Le pipe `|>` tend désormais à être préféré à `%>%` comme on le lira sur le (blog du tidyverse)[, très complet)[https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/]. Ce dernier mérite néanmoins, avec ses autres copains de `magrittr`, d'être détaillé.

Si la vignette de `magrittr` est très bien faite (`vignette("magrittr"`), j'en livre ici une introduction rapide.

## `%>%` 
Dans les grandes lignes, `%>%` et `|>` fonctionnent de la même façon. J'ai tendance à continuer d'utiliser `%>%` qui est chargé automatiquement par le tidyverse. Pour les autres opérateurs, ou si vous n'utilisez pas le tidyverse vous pouvez en disposer avec :

```{r, echo=FALSE}
library(tidyverse)
library(magrittr)
```

Venons en aux faits.

```{r}
runif(100) %>% mean()
```

## Le `.` pour customiser le forward

Par défaut, `%>%` injecte ce qui sort de la fonction à sa gauche comme premier argument de la fonction à sa droite.

La plupart du temps, notamment avec le tidyverse, cela fonctionne à merveille. Mais pensez à `plot` ou à `lm`, l'argument `data` est le second, pas le premier (qui est une `formula`).

`maggrittr` prévoir ce cas et vous pouvez spécifier un atterrissage alternatif avec `.`:

```{r}
iris %>% 
  as_tibble() %>% 
  select(pl=Petal.Length, pw=Petal.Width) %>% 
  lm(pw~pl, data=.)
```
## `%T>%`
Le "tee" pipe est lui utile quand l'une des fonctions est un cul de sac, typiquement un `print` ou un `plot`.

L'idée est, dans un seul pipe, de plotter (ou printer) _mais_ de continuer avec l'objet de départ. En d'autres termes de créer en un point du pipe, une bifurcation dont l'une des branche est un cul de sac, et l'autre continue.

Un exemple vaut mille mots :

```{r}
iris %>% 
  as_tibble() %>% 
  select(pl=Petal.Length, pw=Petal.Width) %T>% 
  print() %>% # here we print
  plot(pw~pl, data=.) # and we come back to the object returned by `select`
```


## `%$% 

Cette variante a pour but d'"exposer" le nom des éléments d'une liste, souvent à des fins d'extraction :

```{r}
iris %>% 
  as_tibble() %>% 
  slice(1:5) %>% 
  select(pl=Petal.Length, pw=Petal.Width) %$% pl
```

Vous pouvez remplacer avantageusement ce pipe par `dplyr::pull` qui est quelque part encore plus conforme à l'esprit "dplyr/tidyverse" :

```{r}
iris %>% 
  as_tibble() %>% 
  slice(1:5) %>% 
  select(pl=Petal.Length, pw=Petal.Width) %>% 
  pull(pw)
```


## `%<>%`

Dernier opérateur de cette liste, un peu passé de mode mais que je mentionne ici par souci de complétude. Cet opérateur `pipe` part d'un objet, lui fait faire tout le chemin au sein d'un pipe et réassigne l'objet de départ avec l'objet retourné par le pipe :

```{r}
x <- iris %>% as_tibble()
x
x %<>% select(1:2)
x
```

Cet opérateur est critique pour un motif recevable : l'assignation est une opération tellement importante qu'elle devrait être plus visible qu'un seul caractère (`%>%` versus `%<>%`).




