{
  "hash": "28f1c493cc318fdbde8c1e3156634b2d",
  "result": {
    "engine": "knitr",
    "markdown": "# Un peu plus loin\n\n## Scripts et reproductibilité\n\nUn concept central est que R **n'a pas de mémoire** d'un jour à l'autre si vous le fermez. Alors oui, vous pouvez toujours \"sauver votre espace de travail\" mais je vous le déconseille fortement. La reproductibilité de vos analyses est en jeu. Nous allons apprendre à faire sans et nous verrons pourquoi c'est une force.\n\nL'espace \"Source\" ou scripts, en haut à gauche par défaut sur RStudio permet d'éditer des scripts en format .R qui est essentiellement un format texte que vous pouvez ouvrir avec n'importe quel éditeur. \n\nLe _workflow_ typique est le suivant : \n\n1. vous tapez des commandes dans la console, vous essayez, vous tâtonnez jusqu'à ce que vous en soyez satisfait·e de chaque résultat intermédiaire ;\n2. vous sauvez ces commandes dans un script que vous pouvez commenter, organiser, etc. ;\n3. Vous pouvez ensuite reproduire toutes vos analyses grâce à ce script, les recycler, les amender que ce soit demain, dans six mois ou sur une autre machine.\n\nReprenons. Un script est donc une collection de commandes qui permettent de reproduire vos analyses, dans six mois, ou par quelqu'un d'autre.\n\n## Commentaires\n\nTout ce qui suit un `#` est ignoré par R, ce qui permet de commenter vos scripts comme ci-après. Faites un usage raisonablement massif de commentaires.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this sections will analyse ...\n1+2 # small comments can also live at the end of the line\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# but not at the beginning: 3+4\n```\n:::\n\n\n\nRStudio utilise également un balisage sommaire pour créer [des sections](https://docs.posit.co/ide/user/ide/guide/code/code-sections.html).\n\nEn commentant, vous aurez peut-être l'impression de perdre du temps mais tout le monde en gagne(ra) : votre vous-même de dans six mois, les reviewers et vos collègues, vous en seront reconnaissants. \n\nRetour au code, je sens que vous voulez de l'action, pas des promesses.\n\n## Opérateurs de comparaison et logiques\n\nL'indexation est une belle occasion de parler des opérateurs de comparaison, très utiles pour filter vos données. L'idée est qu'on teste d'abord une condition dont on peut se servir pour indexer\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntonton <- c(4, 8, 2, 9, 1, 3, 5)\ntest <- tonton < 5  # tests a condition\ntest\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nwhich(test) # returns indices of TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\n# this can be used to index\ntonton[which(test)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 2 1 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# or more directly\ntonton[test] # filter elements of tonton lower than 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 2 1 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# conditions can be combined\ntonton[tonton < 5 & tonton >=2] # same with lower than 5 AND higher or equal to 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\ntata <- c(7:1)\ntonton[tata %in% c(3, 4, 5)] # takes the elements of tonton for which those of that are in 3:5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 9 1\n```\n\n\n:::\n:::\n\n\n\nVoilà une liste de tous les opérateurs de comparaison (`?Comparison`) :\n\nopérateur | signification\n--------- | -------------\n`<`       | strictement inférieur\n`<=`      | inférieur ou égal\n`>`       | strictement supérieur\n`>=`      | supérieur ou égal\n`==`      | égal \n`!=`      | différent\n`%in%`    | dans l'ensemble\n\nEt à y être celle pour les opérateurs logiques (`?Logic`) sur lesquels nous reviendrons :\n\nopérateur | signification\n--------- | -------------\n`!`       | NOT\n`&`       | AND (élément par élément)\n`&&`      | AND\n`|`       | OR (élément par élément)\n`||`      | OR\n`xor(x, y)`  | OR (exclusif)\n\nParfois on peut également avoir besoin de `any`, `all`[^notin]. \n\n[^notin]: `%notin%` et `none` n'existent pas en R mais on peut facilement les composer avec `!(a %in% b)` et `!(all(...))`. Et si vous y tenez vraiment : ```%notin%` <- function(x, y) !(x %in% y) ``\n\n\n\n## Classes d'objets\n\n### `class`\nAccrochez-vous à votre voisin·e, nous abordons un concept clé. Jusqu'ici nous n'avons manipulé que des nombres, avec ou sans assignation à une variable. D'autres **classes** d'objets existent en R. \n\nOn peut accéder à la **classe** d'un vecteur avec la fonction `class`. On voit que les chaînes de caractères sont des `character` pour R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoto <- \"a\"\nclass(toto)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\nImaginons que nous mesurions des individus et que nous enregistrions leurs prénoms, sexe, stature et si, oui ou non, ils ont subi une formation à R. Ces quatres variables auront des natures différents :\n\n* `prenom` : sera plutôt des lettres\n* `stature` : sera un nombre décrivant leur taille\n* `sexe` : sera une étiquette pouvant prendre une et une seule des valeurs suivantes `{femme/homme/autre}`\n* `formation` : sera un descripteur de type `vrai/faux` que l'on traduira en `TRUE/FALSE`.\n\nNous avons déja enregistré trois individus :\n\n```\nprenom        stature   genre     formation\nHildegarde    178       femme     TRUE\nJean-Jacques  163       homme     FALSE\nVictor        184       autre     TRUE\n```\n\n### `character`\nTentons de créer la première variable, c'est à dire la première colonne, à la main :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprenom <- c(\"Hildegarde\", \"Jean-Jacques\", \"Victor\")\nprenom\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hildegarde\"   \"Jean-Jacques\" \"Victor\"      \n```\n\n\n:::\n:::\n\n\n\nR ne fait pas d'histoires et nous a crée un vecteur de chaînes de caractères !\n\n### `numeric`\nCréons maintenant le vecteur `stature`, on sait faire :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstature <- c(178, 163, 184)\nstature\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 178 163 184\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(stature)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\nTous les vecteurs que nous avons crée jusqu'ici, `prenom` mis à part, était donc des `numeric`. Précisions que des variantes de `numeric` existent : `double`, `integer`, etc. mais vous n'aurez peut être jamais à vous en soucier.\n\n### `factor`\n\nLa colonne `genre` est un peu particulière puisque elle est une chaîne de caractères mais elle ne peut prendre que des valeurs définies, à savoir une et une seule valeur de l'ensemble : `{homme, femme, autre}`. La classe `factor` est là pour ça et la fonction `factor` permet de créer notre variable `sexe` :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenre <- factor(c(\"femme\", \"homme\", \"autre\"))\nclass(genre)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n\n```{.r .cell-code}\ngenre\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] femme homme autre\nLevels: autre femme homme\n```\n\n\n:::\n:::\n\n\n\nVotre œil aiguisé aura détecté deux différences par rapport à `prenom` : l'absence de guillemets autour de chaque valeur et une ligne supplémentaire qui indique les valeurs possibles, les `levels` de ce vecteur.\n\nPetite digression : les facteurs en R sont très pratiques mais assez piégeux. Nous aurons l'occasion d'y revenir mais avant ça, évacuons les dernier·e·s informaticien·ne·s pur sang de la salle. Imaginons qu'un nouveau `level`, une nouvelle catégorie, doive être créée pour la variable genre, disons `licorne`. Tentons l'opération candidement :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenre2 <- c(genre, \"licorne\")\ngenre2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2\"       \"3\"       \"1\"       \"licorne\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(genre2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\nMalédiction (apparente)[^factor] que nous expliquerons plus tard.\n\n[^factor]: Il y a encore plus \"drôle\": `c(genre, 0)*2`\n\n\n### `logical`\nLaissons reposer les facteurs pour l'instant et continuons notre création de variable avec la colonne `formation`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformation <- c(TRUE, FALSE, TRUE)\nclass(formation)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n\n```{.r .cell-code}\nformation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE  TRUE\n```\n\n\n:::\n:::\n\n\n\nVoici une classe très utile, les `logical`, souvent issus de tests et de comparaisons logiques, comme survolé précédemmet par exemple :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstature > 180\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE\n```\n\n\n:::\n:::\n\n\n\nNous avons donc crée nos quatre colonnes :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprenom\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hildegarde\"   \"Jean-Jacques\" \"Victor\"      \n```\n\n\n:::\n\n```{.r .cell-code}\nstature\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 178 163 184\n```\n\n\n:::\n\n```{.r .cell-code}\ngenre\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] femme homme autre\nLevels: autre femme homme\n```\n\n\n:::\n\n```{.r .cell-code}\nformation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE  TRUE\n```\n\n\n:::\n:::\n\n\nNous avons vu autant de classes différentes (`character`, `numeric`, `factor`, `logical` respectivement) et, bonne nouvelle, on a quasiment fait le tour des classes ! Il nous en reste deux, très voisines : `list` et `data.frame`.\n\n### `list`\nUne `list`e est un vecteur dont les éléments peuvent être de classes et de longueurs différentes, dont d'autres listes. Autrement dit, c'est la structure de données universelle en R :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(toto=\"A\", tata=c(1, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$toto\n[1] \"A\"\n\n$tata\n[1] 1 3\n```\n\n\n:::\n\n```{.r .cell-code}\nlist(prenom, stature)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"Hildegarde\"   \"Jean-Jacques\" \"Victor\"      \n\n[[2]]\n[1] 178 163 184\n```\n\n\n:::\n:::\n\n\nVous pouvez comparer le résultat à `c(prenom, stature)`. Observez aussi au passage les doubles crochets droits (`[[`), dont vous n'aurez bien plus peur.\n\n### `data.frame`\nUn type de liste bien pratique, devenu archi central en R moderne, est le `data.frame` qui est une liste dont la double particularité est que tous ses éléments sont nommés et de même longueur. Une façon un peu alambiquée de dire qu'il nous aura fallu tout cela pour réinventer en R le tableau excel ![^excel]. Nous y reviendrons abondamment.\n\n[^excel]: Ne dites à personne que j'ai écrit ça !\n\nComme vous pouvez vous en douter, personne n'importe les données comme cela, on préférera lire directement une table `.csv` ou `.xlsx`. Minute papillon, on y vient.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data.frame(prenom=prenom,\n                   stature=stature,\n                   genre=genre,\n                   formation=formation)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        prenom stature genre formation\n1   Hildegarde     178 femme      TRUE\n2 Jean-Jacques     163 homme     FALSE\n3       Victor     184 autre      TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n### `is.*` et `as.*`\nLes fonctions `is.*` permettent de tester les classes :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.logical(formation)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nis.factor(prenom)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nis.data.frame(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\nEt les fonctions `as.*` permettent de convertir les classes, lorsque la conversion est pertinente :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.factor(prenom)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Hildegarde   Jean-Jacques Victor      \nLevels: Hildegarde Jean-Jacques Victor\n```\n\n\n:::\n\n```{.r .cell-code}\nas.character(genre)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"femme\" \"homme\" \"autre\"\n```\n\n\n:::\n:::\n\n\n\n## Indexation multidimensionnelles `[,`\n\n### Cas général : 2 dimensions\n\nRevenons à notre `data.frame` `data`, un objet en deux dimensions : il possède des lignes et des colonnes. L'indexation vue précédemment sur des vecteurs, des objets en une seule dimension, fonctionne dans le même esprit mais il nous faut renseigner les indices pour chaque dimension. Si l'un des indices n'est pas renseigné, toutes les positions concernées sont retournées mais il ne faut pas oublier pour autant la virgule !\n\nPar convention la première dimension est celle des lignes, la deuxième celle des colonnes.  Quelques exemples ci-dessous qui ne font qu'extraire les données. Nous pourrions aussi les modifier avec l'opérateur d'assignation `<-` comme vu précédemment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata[1, ] # first row\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      prenom stature genre formation\n1 Hildegarde     178 femme      TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ndata[, 1] # first column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hildegarde\"   \"Jean-Jacques\" \"Victor\"      \n```\n\n\n:::\n\n```{.r .cell-code}\ndata[-2, ] # everything but the second row\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      prenom stature genre formation\n1 Hildegarde     178 femme      TRUE\n3     Victor     184 autre      TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ndata[c(1, 3), -3] # first and third row, all columns but the third\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      prenom stature formation\n1 Hildegarde     178      TRUE\n3     Victor     184      TRUE\n```\n\n\n:::\n:::\n\n\nVous aurez noté qu'en ne sélectionnant qu'une colonne, par exemple `data[, 1]` ci-dessus, on perd la nature de `data.frame` pour revenir à la classe d'origine de la colonne. Souvent pratique, parfois glissant. Pour ne pas perdre la classe d'origine, il suffit d'ajouter `drop=FALSE` à votre opération d'indexation, après tous les indices :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata[, 2, drop=FALSE]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  stature\n1     178\n2     163\n3     184\n```\n\n\n:::\n:::\n\n\n\n### Subtilités sur `data.frame`\n\nLes colonnes uniques peuvent aussi se sélectionner avec l'opérateur `$` qui permet d'accéder à un élément de liste, pourvu qu'il soit nommé. Les `data.frame`s étant des listes nommées, cela fonctionne :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata$stature\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 178 163 184\n```\n\n\n:::\n:::\n\n\n\nLes doubles crochets droits `[[` permettent eux aussi de sélectionner positionnellement, ou nominativement, l'élément de liste concerné. Les deux commandes ci-dessous seront équivalentes :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata[[3]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] femme homme autre\nLevels: autre femme homme\n```\n\n\n:::\n\n```{.r .cell-code}\ndata[[\"genre\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] femme homme autre\nLevels: autre femme homme\n```\n\n\n:::\n:::\n\n\n\nUn `data.frame` est en effet une liste d'un type un peu particulier : tous ses éléments ont la même longueur et sont nommés. La preuve en images (presque) :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nis.list(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\nLes listes, `data.frame` y compris donc, sont les objets les plus utiles à un niveau un peu plus avancé. Notamment grâce au package `purrr` qui rend les choses conviviales, lisibles... et efficaces.\n\n### Indexation de listes : `[` versus `[[`\n\nL'indexation avec une simple ou une double paire de crochets est souvent source d'incompréhension d'autant que sur des vecteurs le résultat est le même :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoto <- 5:3\ntoto\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 4 3\n```\n\n\n:::\n\n```{.r .cell-code}\ntoto[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\ntoto[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\nGardez à l'esprit que la double paire de crochets droits (`[[`) ne s'utilise que sur des listes (`data.frame` y compris donc).\n\nPour expliquer simplement la différence entre `[` et `[[`, disons qu'une liste est un train de marchandise sans locomotive avec un ou plusieurs wagons.\n\n* `[` permet de sélectionner un wagon, le résultat est toujours un train, certes minima**liste**\n* `[[` permet de sélectionner le **contenu** du wagon qui n'est donc plus un train mais une vache, une palette ou des voyageurs :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntata <- list(wagon1=\"a\", wagon2=1:3)\n# [ picks a list element\ntata[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$wagon2\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(tata[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# [[ picks a list element AND drops the list\ntata[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(tata[[2]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\nNotons que `$` est équivalent à `[[`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntata$wagon2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n\n### Indexation sur `matrix`\n\nMentionnons les matrices qui sont des tableaux rectangulaires de nombres. Elles se créent avec la fonction `matrix` et en spécifiant les valeurs de remplissage et le nombre de lignes et/ou de colonnes :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix(c(3, 1, 9.2, 6, 7, 0), nrow=2)\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    3  9.2    7\n[2,]    1  6.0    0\n```\n\n\n:::\n:::\n\n\n\nLes `matrix` et les `data.frame` possèdent de nombreux points communs. On peut notamment accéder à leurs dimensions, noms de lignes et colonnes avec les mêmes fonctions :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(m)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nrownames(m) <- c(\"plop\", \"plip\")\nrownames(m) # idem for colnames\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"plop\" \"plip\"\n```\n\n\n:::\n:::\n\n\n\nUne opération courante sur des matrices consiste à faire des calculs _marginaux_, par exemple calculer la somme par colonnes. La famille `apply` permet ce type de calcul. On va renseigner trois arguments (voir `?apply` et ses exemples) : l'objet sur lequel travailler; la dimension sur laquelle calculer (`1` pour les lignes, `2` pour les colonnes); et enfin la fonction à appliquer, sans parenthèses :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(m, 2, sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  4.0 15.2  7.0\n```\n\n\n:::\n:::\n\n\n\n### Indexation sur des `array`s\n\nPar souci de complétude, l'idée de matrice se généralise dans des dimensions supérieures à 2. Pour le dire autrement, une `matrix` est un `array` à deux dimensions.\n\nLes `array` se créent dans le même esprit : les valeurs de remplissage d'abord, puis on précise les dimensions. Ci-dessous, un array de deux tranches de matrices de `2x3`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- array(data=c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), dim=c(2, 3, 2))\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    7    9   11\n[2,]    8   10   12\n```\n\n\n:::\n:::\n\n\n\nL'indexation fonctionne ici aussi. Par exemple si l'on veut la valeur de la première ligne, troisième colonne, deuxième tranche :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na[1, 3, 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11\n```\n\n\n:::\n:::\n\n\n\n## Un peu de vocabulaire\n\nVoici quelques fonctions à connaître, rangées par classes d'objets.\n\n### Sur `numeric`\nQuelques fonctions utiles pour décrire des vecteurs numériques (`numeric`) :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(5, 4, 3, 2, 1)\nlength(x) \nmin(x)\nmax(x)\nrange(x)  # shortcut for c(min(x), max(x))\nmedian(x) # shortcut for quantile(x, probs=0.5)\nsum(x)\nmean(x)   # average\nsd(x)     # standard deviation\nvar(x)    # variance\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n[1] 1\n[1] 5\n[1] 1 5\n[1] 3\n[1] 15\n[1] 3\n[1] 1.581139\n[1] 2.5\n```\n\n\n:::\n:::\n\n\n\n### Sur `factor`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf1 <- factor(c(\"apple\", \"banana\", \"banana\", \"pear\", \"grape\", \"grape\"))\nf2 <- factor(c(\"yellow\", \"yellow\", \"yellow\", \"green\", \"red\", \"green\"))\n\nlength(f1)  # length\nlevels(f1)  # levels, as character\nnlevels(f1) # number of levels, shortcut for length(level(f1))\ntable(f1)   # count occurences\ntable(f1, f2) # cross-tabulate factors\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n[1] \"apple\"  \"banana\" \"grape\"  \"pear\"  \n[1] 4\nf1\n apple banana  grape   pear \n     1      2      2      1 \n        f2\nf1       green red yellow\n  apple      0   0      1\n  banana     0   0      2\n  grape      1   1      0\n  pear       1   0      0\n```\n\n\n:::\n:::\n\n\n### Sur `character`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbla1 <- \"tonton\"\nbla2 <- \"tata\"\n\nnchar(bla1) # count characters\npaste(bla1, bla2, sep=\" et \") # see also paste0\ntoupper(bla1) # convert to upper case. see also tolower()\ngsub(\"o\", \"i\", bla1) # replace all 'o' with 'i' in bla1. see ?grep\nsubstr(bla1, 2, 4) # character from positions 2 to 4\nabbreviate(bla1) # abbreviate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n[1] \"tonton et tata\"\n[1] \"TONTON\"\n[1] \"tintin\"\n[1] \"ont\"\ntonton \n\"tntn\" \n```\n\n\n:::\n:::\n\n\n\nLes derniers exemples montrent des manipulations de chaînes de caractères. Le package `stringr` remplace avantageusement ces approches \"historiques\". Nous y reviendrons.\n\n### Sur `data.frame`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data)\nnrow(data)\nncol(data) # equivalent to length(data)\nsummary(data) # a summary, column-wise\nhead(data) # show only the first rows\ntail(data) # show only the last rows\n# View(data) # show an interactive viewer for your data.frame\nstr(data)  # show the structure of your data.frame\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 4\n[1] 3\n[1] 4\n    prenom             stature        genre   formation      \n Length:3           Min.   :163.0   autre:1   Mode :logical  \n Class :character   1st Qu.:170.5   femme:1   FALSE:1        \n Mode  :character   Median :178.0   homme:1   TRUE :2        \n                    Mean   :175.0                            \n                    3rd Qu.:181.0                            \n                    Max.   :184.0                            \n        prenom stature genre formation\n1   Hildegarde     178 femme      TRUE\n2 Jean-Jacques     163 homme     FALSE\n3       Victor     184 autre      TRUE\n        prenom stature genre formation\n1   Hildegarde     178 femme      TRUE\n2 Jean-Jacques     163 homme     FALSE\n3       Victor     184 autre      TRUE\n'data.frame':\t3 obs. of  4 variables:\n $ prenom   : chr  \"Hildegarde\" \"Jean-Jacques\" \"Victor\"\n $ stature  : num  178 163 184\n $ genre    : Factor w/ 3 levels \"autre\",\"femme\",..: 2 3 1\n $ formation: logi  TRUE FALSE TRUE\n```\n\n\n:::\n:::\n\n\n\ngraphics:::plot.data.frame\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2329)\nrunif(10, -1, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  0.34341687 -0.89818619  0.86519883  0.05414381 -0.95204424  0.42169961\n [7]  0.09957463  0.27190793 -0.84168929  0.72023581\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Un mot sur les packages\n\n## L'opérateur pipe `%>%`\nL'opérateur pipe permet de passer, de gauche à droite, le résultat d'une fonction à une seconde fonction, puis à une troisième. Ce pipe est détaillé dans un chapitre mais sa compréhension devrait être intuitive.\n\nComparez par exemple ces deux lignes pourtant strictement équivalentes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magrittr)\nplot(sqrt(sample(seq(1:100), 6)))              # road to burnout\n```\n\n::: {.cell-output-display}\n![](un-peu-plus-loin_files/figure-pdf/unnamed-chunk-33-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nseq(1:100) %>% sample(6) %>% sqrt() %>% plot() # let's breathe\n```\n\n::: {.cell-output-display}\n![](un-peu-plus-loin_files/figure-pdf/unnamed-chunk-33-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nLes packages du R moderne, en premier lieu ceux du `tidyverse` en ont fait une idée centrale de leur design et il est peu dire que nous autres mortel·le·s en profitons tous les jours.\n\n## Trucs et astuces pour R et RStudio\n\n* Toutes les commandes tapées depuis l'ouverture de R/RStudio sont dans votre console. Pour l'effacer, pressez `<Ctrl> + <L>`. Vos objets sont conservés.\n* Pour naviguer dans votre historique, côté console, pressez les flèches `<Haut>` et `<Bas>`.\n* Pour compléter un nom de fonction ou d'argument, pressez `<Tab>`\n\n Le flux classique de travail est le suivant :\n\n1. Vous voulez faire quelque chose\n2. Vous bidouillez dans la console\n3. Vous êtes satisfait·e de votre commande\n4. Vous la sauvez dans un script\n5. Repartez à 1.\n\nAu fur et à mesure de votre avancée, votre script va se remplir. Demain, dans 6 mois, ou sur un autre ordinateur, vous pourrez refaire \"tourner\" vos analyses et avoir strictement les mêmes résultats. On parle de **reproductibilité**. Gage de science sérieuse et, pour vous, de sérénité. Pour ces raisons, je vous conseille de ne pas enregistrer votre environnement de travail quand vous fermez R ou RStudio. \n\nUn script peut être un fichier texte ou `.R`. RStudio gère bien les différents scripts en affichant dans la même fenêtre votre console, vos scripts, vos graphes, etc.\n\n* De temps à autre, faites tout \"retourner\". RStudio a un raccourci pour cela : `Run > Restart R and run all`. \n* Vous pouvez également faire tourner un autre script depuis le script en cours avant `source`. Bien pratique par exemple pour mettre toutes vos fonctions dans un script et les analyses à proprement parler dans un autre.\n\nRStudio a pléthore raccourcis et fonctionnalités bien pratiques par exemple pour formater votre code selon les standards en cours (`Code > Reformat Code`) ou simplement pour réindenter proprement votre code. L'indentation est le décalage par rapport à la marge gauche du script. Cette indentation est purement esthétique en R, contrairement à Python par exemple. Elle est bien pratique pour sauter une ligne qui serait trop longue, ce qui est déconseillé.\n\n## Pour la suite\n\nSi vous lisez ces lignes c'est que vous avez survécu jusqu'ici, bravo. Vous avez fait le plus dur, vous parlez déjà R. Le reste est une longue promenade en faux plat qui tourne autour de ces idées. Votre vocabulaire va s'enrichir, votre syntaxe sera de plus en plus concise et vous passerez ainsi de plus en plus de temps à la plage.\n\nBien sûr, vous aurez envie de mettre le feu à l'ordinateur, votre bureau et l'intégralité du monde open-source. N'en faites rien, asseyez vous en tailleur et méditez la sentence de notre maitre à tou·te·s, Hadley Wickham :\n\n> Frustration is typical and temporary\n\nL'échec, l'incompréhension, la frustration sont la matérialisation de l'apprentissage. Restez calmes, gardez votre sang-froid, tapez votre problème dans Google, lisez Stack Overflow et faites vous confiance. Persévérez. Je crois en vous.\n\n\n\n### Notions d'environnement\nLa valeur `x` ci-dessus, dans la définition de fonction, est une variable utilisée uniquement dans l'**environnement** de la fonction `plus3`. Un environnement est un espace de travail mémoire isolé du reste du monde et qui n'existe que durant l'exécution de la fonction.\n\nAutrement dit, si la variable `x` est déja assignée dans l'**environnement global**, c'est à dire en dehors de la fonction, dans la console si on veut, et bien ce `x` global ne sera ni modifié, ni même utilisé. Un exemple :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplus3 <- function(x) {\n  x + 3\n  }\n\nx <- 45\nplus3(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n\n\nNaturellement vous pouvez tout de même utiliser votre `x` global comme argument de la fonction `plus3`. Ce `x` global va être utilisé localement par la fonction puis vous être retourné :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplus3(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 48\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n## Reproductibilité\n\nLe _workflow_ typique, ou flux de travail en bon français, est le suivant : \n\n1. vous tapez des commandes dans la console, vous essayez, vous tâtonnez jusqu'à ce que vous en soyez satisfait·e de chaque résultat intermédiaire ;\n2. vous sauvez ces commandes dans un script que vous pouvez commenter, organiser, etc. ;\n3. Vous pouvez ensuite reproduire toutes vos analyses grâce à ce script, les recycler, les amender que ce soit demain, dans six mois ou sur une autre machine.\n\nUn concept central est que R **n'a pas de mémoire** d'un jour à l'autre si vous le fermez. Alors oui, vous pouvez toujours \"sauver votre espace de travail\" mais je vous le déconseille fortement. La reproductibilité de vos analyses est en jeu. Nous allons apprendre à faire sans et nous verrons pourquoi c'est une force.\n\nReprenons. Un script est donc une collection de commandes qui permettent de reproduire vos analyses. Excel peut déjà aller se rhabiller.\n\nVous pouvez exécuter les commandes depuis votre script vers la console. Dans RStudio, cliquer sur \"Run\" et regardez les différents options avec les raccourcis attachés.\n\nPour le moment, nous allons utiliser la console, sans rassembler nos commandes en un script, mais nous y viendrons vite.\n\n## Commentaires\n\nTout ce qui suit un `#` est ignoré par R, ce qui permet de commenter vos scripts comme ci-après. Faites un usage massif de commentaires. Votre vous-même de dans six mois, les reviewers ou pire encore vos collègues, vous en seront reconnaissants. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this is a comment. R ignores you, you should not!\n# add two numbers\n1+1 # comments can also live after a command\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\n# but not before (on the same line): 3+3\n```\n:::\n",
    "supporting": [
      "un-peu-plus-loin_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}