{
  "hash": "9cf0fac04996fa9d0c57b7c58579a26f",
  "result": {
    "markdown": "# Éléments de programmation\n\n## Fonctions\n\nLes fonctions sont des unités de code qui remplissent une fonction donnée qui n'existe nulle part dans R[^curieux]. Elles sont au coeur de R, et plus largement de tous les environnements de programmation. Paraxalement et même si elles peuvent effrayer au début, il n'y a pas grand chose à connaître sur les fonctions !\n\n[^curieux]: ou plus probablement vous n'avez tout exploré [ici](https://cran.r-project.org/web/packages/available_packages_by_name.html) :-)\n\n* Définir une fonction plutôt que copier-coller son code à chaque fois que vous en avez besoin est non seulement bien pratique mais aussi plus sûr : si vous avez une modification à faire vous la faites une fois dans la définition de fonction, pas partout.\n\n* Idéalement une fonction fait une seule chose mais bien ! Faire des fonctions qui font aussi le café est un tropisme de débutant·e·s mais aue l'on perd vite. Oubliez donc `all_my_PhD_results()` et décomposez vos fonctions. Vos collaborateurs et vous-même dans six mois (c'est pareil), vous en sauront gré.\n\n* Idéalement toujours, sauf pour les cas les plus triviaux, une fonction est documentée sur le modèle de la doc de R: c'est à dire son fonctionnement, les différents arguments, ce qu'elle retourne, des détails éventuels et des exemples. Commentez également l'intérieur de vos fonctions, ce sera utile pour tous y compris vous-même et tout de suite.\n\n* Pour les scripts les plus complexes, vous pouvez regrouper vos fonctions dans un script indépendant, et le `source` r en début de votre script d'analyse ou de votre document Quarto[^domestic]. \n\n[^domestic]: pour donner un ordre de grandeur, sur mes cinq derniers projets de consulting, tous les scripts finaux dépassent les 500 lignes mais sourcent des scripts qui font plus de 1000 lignes, dont presque la moitié de commentaires !\n\n> Ne soyez pas timides, crééz vos fonctions à chaque fois que vous répétez le même code\n\nPassons aux choses sérieuses. \n\nLes fonctions sont définies avec la fonction `fonction` suivant le patron :\n\n```\nnom_fonction <- function(arg1=default1, arg2=default2, ...) {\n  # instructions\n  return()\n}\n```\n\n* Une fonction peut avoir zéro, un, plusieurs, ou même un nombre indéfini d'arguments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 0 argument\nsay_hi <- function() cat(\"hi there\")\n# try it: say_hi()\n\n# pass arguments to internal functions with `...`\nmy_boxplot <- function(x, y, ...){\n  boxplot(x, y, ...)\n}\n# try it: my_boxplot(iris$Petal.Length, iris$Species, col=\"grey50\")\n```\n:::\n\n* Une fonction a des arguments nommés. Quand c'est possible avec une valeur par défaut. Ces valeurs peuvent être calculées \"à la volée\" sur d'autres arguments (voir `by` dans `?seq`).\n\n* Une fonction peut utiliser une fonction comme argument (`FUN` dans `apply` par exemple)\n\n* Une fonction peut retourner une fonction[^factory]\n\n[^factory]: Je vous laisse avec [Hadley](https://adv-r.hadley.nz/function-factories.html), et chercher du paracétamol\n\n* Le code d'une fonction est accessible, la plupart du temps, en tapant le nom de la fonction sans parenthèse :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsay_hi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction() cat(\"hi there\")\n```\n:::\n:::\n\n\n* Une fonction ne peut retourner qu'un seul objet. Si vous avez plusieurs, il vous faut en passer par une liste, si possible nommée : `return(list(res1=... res2=...))`\n\n* Idéalement, une fonction peut parer à toutes les situations avec un message d'erreur informatif ou a minima une gestion de l'erreur. Je vous mets à l'aise, ce n'est presque jamais le cas : `plot(\"a\")` n'est pas vraiment explicite et ne point pas le vrai problème.\n\n* Quand vous commencez à avoir un joli paquet de fonctions, il est temps de penser à créer un package, pour vous-même ou pour le monde et dans un premier temps de lire la section consacrée plus loin. \n\n## Un mot sur les méthodes\n\nLes fonctions peuvent avoir un comportement différent selon la classe de l'argument sur lequel elles opèrent. Un exemple trivial est `summary` qui retourne des quantiles quand on lui passe un `numeric`, et un descriptif plus sommaire quand on lui passe un `character` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      1       2       3       3       4       5 \n```\n:::\n\n```{.r .cell-code}\nsummary(letters[1:5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Length     Class      Mode \n        5 character character \n```\n:::\n:::\n\n\n`summary` est une _méthode_ plus qu'une fonction, une _façon_ de faire une chose (un résumé en l'occurence) sur une variable qui _dépend_ de la classe de cette variable.\n\nVoyons d'abord comment déclarer une méthode. Nous allons l’appeler `shout`, pour crier en anglais. Quand `shout` sera appelée sur un `character` elle le passera en majuscules; sur un `numeric` elle élèvera au carré.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshout <- function(x) {\n  UseMethod(\"shout\", x)\n}\n\nshout.default <- function(x) {\n  stop(\"'shout' not defined on this class\")\n}\n\nshout.character <- function(x) {\n  toupper(x)\n}\n\nshout.numeric <- function(x) {\n  x^2\n}\n\n# shout(iris) # try this on your machine\nshout(\"let's be quiet\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"LET'S BE QUIET\"\n```\n:::\n\n```{.r .cell-code}\nshout(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  9 16 25\n```\n:::\n:::\n\n\nC'est bien joli tout ça, mais n'aurait-on pas pu caler un bon vieux `is.numeric` et tout déclarer dans une fonction. Oui, bravo, vous avez raison (j'ai créé un monstre). Mais pas vraiment (du calme jeune padawan) car les méthodes peuvent faire bien plus que cela, et notamment donner une saveur \"orientée objet\" à R.\n\nIl existe plusieurs systèmes de déclaration de méthodes en R, et plus largement de programmation orientée objet, on peut citer `S3`, `S4`, `R6`, etc. Le présent document ne s'attardera pas plus sur les méthodes mais les lignes ci-dessous démineront probablement quelques mystères de R.\n\nPour afficher toutes les méthodes, on utilisera la fonction `methods` qui peut s’appeler soit sur le nom soit sur la classe :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmethods(\"shout\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] shout.character shout.default   shout.numeric  \nsee '?methods' for accessing help and source code\n```\n:::\n\n```{.r .cell-code}\nmethods(class=\"character\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] all.equal                as.data.frame            as.Date                 \n [4] as.POSIXlt               as.raster                coerce                  \n [7] coerce<-                 formula                  getDLLRegisteredRoutines\n[10] Ops                      shout                   \nsee '?methods' for accessing help and source code\n```\n:::\n\n```{.r .cell-code}\n# try: methods(\"plot\") # graphs, graphs, everywhere\n# or even: methods(\"summary\") # !!!\n```\n:::\n\n\nComme on l'a vu précédemment, pour accéder au code d'une méthode on pourrait imaginer qu'il suffise, comme pour toute fonction de taper son nom à la console, sans parenthèses. Ici, le nom ne suffit pas, il faut également le suffixe de classe :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshout # not what I wanted but still, we know it's a method not a bare function\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction(x) {\n  UseMethod(\"shout\", x)\n}\n<bytecode: 0x7ffbf4ed5978>\n```\n:::\n\n```{.r .cell-code}\nshout.character\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction(x) {\n  toupper(x)\n}\n```\n:::\n\n```{.r .cell-code}\nshout.numeric\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction(x) {\n  x^2\n}\n```\n:::\n:::\n\n\n## Un mot sur les packages\n\nC'est un exercice très instructif, valorisant, valorisable et devenu quasiment facile de nos jours. \n\nLa référence absolue est _R packages_ d'Hadley Wickham, qui a le bon goût d'être libre : [https://r-pkgs.org/]()\n\n_Dura lex, sed lex_, les tables de la loi sont plus dures mais ce sont les lois : [https://cran.r-project.org/doc/manuals/r-release/R-exts.html](Writing R extensions -- official R documentation)\n\n\n## Control flow\n\nFaisons comme Houellebecq et pompons [Wikipédia](https://fr.wikipedia.org/wiki/Structure_de_contr%C3%B4le) qui écrit mieux que nous :\n\n> En programmation informatique, une structure de contrôle est une instruction particulière d'un langage de programmation impératif pouvant dévier le flot de contrôle du programme la contenant lorsqu'elle est exécutée. Si, au plus bas niveau, l'éventail se limite généralement aux branchements et aux appels de sous-programme, les langages structurés offrent des constructions plus élaborées comme les alternatives (if, if–else, switch…), les boucles (while, do–while, for…) ou encore les appels de fonction. \n\n`if`, `else`, `ifelse`, `for`, `while`, `next`, `break`\n\nEn termes plus directs, le _control flow_  dont disposent à peu près tous les langages de programmation, permet d'adapter le comportement d'un code en fonction des circonstances.\n\n## `if`\nImaginons par exemple que nous voulions écrire une fonction qui imprime à la console si un nombre est positif ou négatif. La structure `if` permet de tester une condition logique et, généralement, d'agir en conséquence. `?Control` nous apprend que son patron général est le suivant :\n\n```\nif (condition) expr\n```\n\n`condition` sera un test logique qui, s'il est vrai, exécutera la ou les commandes `expr`. Si la commande est unique vous pouvez l'écrire en ligne. Si elle est multiple, on l'embrassera d'accolades :\n\n```\nif (condition) {\nexpr1\nexpr2\netc.\n}\n```\n\nNotre fonction pourrait ressembler à :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigne1 <- function(x){\n  if (x > 0) {\n    cat(x, \"est positif\")\n  }\n  if (x < 0) {\n    cat(x, \"est négatif\")\n  }\n}\n\nsigne1(-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-1 est négatif\n```\n:::\n\n```{.r .cell-code}\nsigne1(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5 est positif\n```\n:::\n:::\n\n\nIci, nous omettons le classique `return` car la fonction ne retourne rien, elle se contente d'émettre un message dans la console avec `cat()` ce qui est très différent. Du reste, vous pouvez presque toujours omettre `return` car une fonction retourne simplement la dernière valeur de son code. Ci-dessous, `signe1()` ne retourne rien car `toto` est `NULL` (sauf si vous l'avez assigné avant naturellement).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoto <- signe1(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 est positif\n```\n:::\n\n```{.r .cell-code}\ntoto\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\n## `else`\nPlutôt que d'empiler les `if`, vous pouvez utiliser `else` quand si ce n'est pas un cas, c'est forcément l'autre. Comme cela (à première vue) semble être le cas ici :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigne2 <- function(x){\n  if (x > 0) {\n    cat(x, \"est positif\")\n  } else {\n    cat(x, \"est négatif\")\n  }\n}\n\nsigne2(-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-1 est négatif\n```\n:::\n\n```{.r .cell-code}\nsigne2(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5 est positif\n```\n:::\n:::\n\n\nEn réalité ici, on a une complication supplémentaire quand `x=0`, que n'est pas prévu par `signe1` et pire encore par `signe2` (essayez donc `signe1(0)` et `signe2(0)`). Les `if/else` peuvent être emboités et l'indentation de code se révèle particulièrement utile. (`Code > Reindent lines` dans RStudio, ou `<Ctrl>+A, <Ctrl>+I`, en remplaçant <Ctrl> par <Cmd> sous Mac).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigne3 <- function(x){\n  if (x==0) {\n    cat(x, \"n'est ni négatif ni positif\")\n  } else {\n    if (x > 0) {\n      cat(x, \"est positif\")\n    }\n    if (x < 0) {\n      cat(x, \"est négatif\")\n    }  \n  }\n}\n\nsigne3(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 n'est ni négatif ni positif\n```\n:::\n\n```{.r .cell-code}\nsigne3(-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-1 est négatif\n```\n:::\n\n```{.r .cell-code}\nsigne3(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5 est positif\n```\n:::\n:::\n\n\nCe comportement de choix multiples se généralise au delà de deux avec `switch`.\n\nVous pouvez tester plusieurs choses à la fois mais le résultat doit être un `logical` de longueur 1, c'est à dire soit `TRUE` soit `FALSE`. Si par exemple vous voulez tester si un nombre est positif ET inférieur à 10 alors vous utiliserez un patron de ce genre pour `cond` :\n\n```\nif ((x > 0) & (x < 10))\n```\n\nFinis les messages à la console, nous allons désormais retourner des nombres, en l'occurence `-1` si `x` est négatif, `1` sinon (zéro y compris):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigne4 <- function(x) {\n  if (x<0)\n    -1\n  else\n    1\n}\n\nsigne4(-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1\n```\n:::\n\n```{.r .cell-code}\nsigne4(0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nsigne4(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nAu passage, un exemple d'omission d'accolades lorsqu'une seule ligne est à exécuter.  Cette structure aussi compacte avec un seul `if` et un seul `else`, et surtout une seule valeur retournée peut s'écrire de façon plus compacte avec `ifelse` suivante le patron : `ifelse(cond, expr_ifTRUE, expr_ifFALSE)` dans ce goût là : `signe5 <- function(x) ifelse(x<0, -1, 1)`\n\nÀ ce moment de votre existence, vous vous dites \"génial, je vais pouvoir balancer un vecteur à `signe5` et aller à la plage\". Modérez votre enthousiasme :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigne4(-1:1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in if (x < 0) -1 else 1: the condition has length > 1 and only the first\nelement will be used\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1\n```\n:::\n:::\n\n\nCette commande aurait pu marcher, via un recyclage dans votre dos, mais ce n'est pas le cas, ce qui nous donne - heureux hasard - une transition rêvée vers `for`. Notez bien que je vous montre `for` mais que normalement vous ne devriez presque jamais en avoir besoin grâce à `map` et ses variantes, dans le package `purrr`.\n\n## `for`\n\nParcourir les valeurs d'un vecteur, d'une matrice, etc. et agir avec ces valeurs est une tâche très courante en programmation. `for` permet de balayer un vecteur donné et d'assigner temporairement cette valeur à une autre variable, généralement appelée `i` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:5) {\n  print(i^2)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 4\n[1] 9\n[1] 16\n[1] 25\n```\n:::\n:::\n\n\nLe code ci-dessus devrait être transparent. Une précision toutefois : je suis obligé de forcer l'impression à la console avec `print` (une variante moins subtile de `cat`) sinon ce qu'il se passe dans les accolades de `for` y resterait, sans conséquence visible. \n\nSi vous voulez utiliser les résultats d'un calcul au sein d'une boucle `for`, ce qui est le cas le plus fréquent, vous devez l'assigner à un objet compatible préalablement crée. De plus, on utilise généralement un vecteur avec toutes les valeurs à balayer par `i`. Plutôt que d'utiliser cette chose : `1:length(x)`, on préferera le plus court et souvent plus générique `seq_along(x)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:5\nres <- vector(\"numeric\", length=length(x))\nfor (i in 1:length(x)){\n  res[i] <- x[i]^2\n}\nres\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  9 16 25\n```\n:::\n:::\n\n\nAu risque de me répéter, vous ne devriez pas avoir trop besoin de `for` si vous maîtrisez `map`, qui est plus compact, plus explicite et le plus souvent plus rapide :\n\n\n::: {.cell}\n\n```{.r .cell-code}\npurrr::map_dbl(1:5, ~.x^2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  9 16 25\n```\n:::\n:::\n\n\n## `while` et al.\n\nJe ne m'attarde pas sur les autres structures de contrôles, bien moins utilisées, très bien décrites ailleurs et plutôt compréhensibles si vous avez survécu jusqu'ici : `while`, `next`, `repeat`, `break`, etc.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}