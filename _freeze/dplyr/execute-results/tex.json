{
  "hash": "532a91fef65abe4999f88a90e2a3e0b5",
  "result": {
    "engine": "knitr",
    "markdown": "# Manipulation de données avec `dplyr`\n\n\n::: {.cell}\n\n:::\n\n\n\n`dplyr`, un package du `tidyverse` simplifie grandement la manipulation de tableaux de données. Il permet de renommer, ordonner, sélectionner et crééer de nouvelles colonnes, filtrer des lignes, faire facilement des résumés groupés et des sous-jeux de données.\n\nCelles et ceux familiers avec SQL, et plus largement les bases de données, seront en terrain connu.\n\n## `tibble`\n`dplyr` comme le reste du `tidyverse` s'appuie massivement sur les `data.frame`, dont la méthode d'affichage n'était pas optimale. Le package `tibble` introduit une classe légèrement modifiée de `data.frame`s dont la conséquence la plus visibles est la méthode d'affichage : à la fois plus compacte _et_ plus informative.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n:::\n\n\n\nComparez l'affichage par défaut de ça : (je ne l'affiche pas ici par empathie envers vos molettes de souris) :\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris # berk\n```\n:::\n\n\n\nà ça :\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>% as_tibble() # <3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 150 x 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# i 140 more rows\n```\n\n\n:::\n:::\n\n\nLes fonctions de `dplyr` sont toutes des _verbes_, qui traduisent bien l'action à mener. \n\nLe premier argument est toujours un tibble et la sortie est aussi un tibble. Ce qui se marie à merveille avec le pipe de maggritr `%>%` ou le pipe désormais embarqué dans R `|>`.\n\nLa plupart des commandes présentées ci-dessous sont tellement explicites qu'elles se passent de commentaires.\n\n## `select` pour sélectionner des colonnes\n\nIndexer par les noms de colonnes. Ici on ne _retient_ que celles passées à `select` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  select(name, height, sex, species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 x 4\n   name               height sex    species\n   <chr>               <int> <chr>  <chr>  \n 1 Luke Skywalker        172 male   Human  \n 2 C-3PO                 167 none   Droid  \n 3 R2-D2                  96 none   Droid  \n 4 Darth Vader           202 male   Human  \n 5 Leia Organa           150 female Human  \n 6 Owen Lars             178 male   Human  \n 7 Beru Whitesun Lars    165 female Human  \n 8 R5-D4                  97 none   Droid  \n 9 Biggs Darklighter     183 male   Human  \n10 Obi-Wan Kenobi        182 male   Human  \n# i 77 more rows\n```\n\n\n:::\n:::\n\n\n\nMais on peut aussi utiliser une indexation positionnelle\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  select(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 x 5\n   name               height  mass hair_color    skin_color \n   <chr>               <int> <dbl> <chr>         <chr>      \n 1 Luke Skywalker        172    77 blond         fair       \n 2 C-3PO                 167    75 <NA>          gold       \n 3 R2-D2                  96    32 <NA>          white, blue\n 4 Darth Vader           202   136 none          white      \n 5 Leia Organa           150    49 brown         light      \n 6 Owen Lars             178   120 brown, grey   light      \n 7 Beru Whitesun Lars    165    75 brown         light      \n 8 R5-D4                  97    32 <NA>          white, red \n 9 Biggs Darklighter     183    84 black         light      \n10 Obi-Wan Kenobi        182    77 auburn, white fair       \n# i 77 more rows\n```\n\n\n:::\n:::\n\n\nEt négative :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  select(-name, -height, -mass, -hair_color)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 x 10\n   skin_color eye_color birth_year sex   gender homeworld species films vehicles\n   <chr>      <chr>          <dbl> <chr> <chr>  <chr>     <chr>   <lis> <list>  \n 1 fair       blue            19   male  mascu~ Tatooine  Human   <chr> <chr>   \n 2 gold       yellow         112   none  mascu~ Tatooine  Droid   <chr> <chr>   \n 3 white, bl~ red             33   none  mascu~ Naboo     Droid   <chr> <chr>   \n 4 white      yellow          41.9 male  mascu~ Tatooine  Human   <chr> <chr>   \n 5 light      brown           19   fema~ femin~ Alderaan  Human   <chr> <chr>   \n 6 light      blue            52   male  mascu~ Tatooine  Human   <chr> <chr>   \n 7 light      blue            47   fema~ femin~ Tatooine  Human   <chr> <chr>   \n 8 white, red red             NA   none  mascu~ Tatooine  Droid   <chr> <chr>   \n 9 light      brown           24   male  mascu~ Tatooine  Human   <chr> <chr>   \n10 fair       blue-gray       57   male  mascu~ Stewjon   Human   <chr> <chr>   \n# i 77 more rows\n# i 1 more variable: starships <list>\n```\n\n\n:::\n:::\n\n\n\nOu encore des _helpers_ fournis par `tidyselect` (allez donc jeter un oeil à `?tidyselect::language`) :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  select(name, species, ends_with(\"color\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 x 5\n   name               species hair_color    skin_color  eye_color\n   <chr>              <chr>   <chr>         <chr>       <chr>    \n 1 Luke Skywalker     Human   blond         fair        blue     \n 2 C-3PO              Droid   <NA>          gold        yellow   \n 3 R2-D2              Droid   <NA>          white, blue red      \n 4 Darth Vader        Human   none          white       yellow   \n 5 Leia Organa        Human   brown         light       brown    \n 6 Owen Lars          Human   brown, grey   light       blue     \n 7 Beru Whitesun Lars Human   brown         light       blue     \n 8 R5-D4              Droid   <NA>          white, red  red      \n 9 Biggs Darklighter  Human   black         light       brown    \n10 Obi-Wan Kenobi     Human   auburn, white fair        blue-gray\n# i 77 more rows\n```\n\n\n:::\n:::\n\n\n\n## `rename` : pour renommer des colonnes\n\n`rename` est bien pratique pour renommer des colonnes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  rename(id=name, sp=species) %>% \n  select(id, sp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 x 2\n   id                 sp   \n   <chr>              <chr>\n 1 Luke Skywalker     Human\n 2 C-3PO              Droid\n 3 R2-D2              Droid\n 4 Darth Vader        Human\n 5 Leia Organa        Human\n 6 Owen Lars          Human\n 7 Beru Whitesun Lars Human\n 8 R5-D4              Droid\n 9 Biggs Darklighter  Human\n10 Obi-Wan Kenobi     Human\n# i 77 more rows\n```\n\n\n:::\n:::\n\n\n\nSachez que vous pouvez aussi combiner `select` et `rename` comme suit :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  select(id=name, sp=species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 x 2\n   id                 sp   \n   <chr>              <chr>\n 1 Luke Skywalker     Human\n 2 C-3PO              Droid\n 3 R2-D2              Droid\n 4 Darth Vader        Human\n 5 Leia Organa        Human\n 6 Owen Lars          Human\n 7 Beru Whitesun Lars Human\n 8 R5-D4              Droid\n 9 Biggs Darklighter  Human\n10 Obi-Wan Kenobi     Human\n# i 77 more rows\n```\n\n\n:::\n:::\n\n\n\n## `slice` : selection positionnelle des lignes\n\nVous pouvez passer un ou plusieurs ids de colonnes :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkeep_these <- c(1, 5, 8)\nstarwars %>% slice(keep_these)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n1 Luke Sky~    172    77 blond      fair       blue              19 male  mascu~\n2 Leia Org~    150    49 brown      light      brown             19 fema~ femin~\n3 R5-D4         97    32 <NA>       white, red red               NA none  mascu~\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\n\nC'est plus lisible que `starwars[keep_these]` et ça reste _pipable_ : que demande le peuple ?\n\nNaturellement vous pouvez slicer négativement.\n\n## `filter` : selection conditionnelle des lignes\n\nParfait pour inspecter, analyser des sous-jeux de données :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  filter(species==\"Human\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35 x 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk~    172    77 blond      fair       blue            19   male  mascu~\n 2 Darth V~    202   136 none       white      yellow          41.9 male  mascu~\n 3 Leia Or~    150    49 brown      light      brown           19   fema~ femin~\n 4 Owen La~    178   120 brown, gr~ light      blue            52   male  mascu~\n 5 Beru Wh~    165    75 brown      light      blue            47   fema~ femin~\n 6 Biggs D~    183    84 black      light      brown           24   male  mascu~\n 7 Obi-Wan~    182    77 auburn, w~ fair       blue-gray       57   male  mascu~\n 8 Anakin ~    188    84 blond      fair       blue            41.9 male  mascu~\n 9 Wilhuff~    180    NA auburn, g~ fair       blue            64   male  mascu~\n10 Han Solo    180    80 brown      fair       brown           29   male  mascu~\n# i 25 more rows\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\nOn peut combiner les conditions, y compris sur les `numeric`. Ici, on ne retient que les petites brunes (humaines) aux yeux non bleus :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  filter(species==\"Human\", sex==\"female\", height <= 170, eye_color != \"blue\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n1 Leia Org~    150    49 brown      light      brown             19 fema~ femin~\n2 Shmi Sky~    163    NA black      fair       brown             72 fema~ femin~\n3 Dormé        165    NA brown      light      brown             NA fema~ femin~\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\nC'est peut-être le moment de réviser les opérateurs logiques que nous avons vu à l'apéritif.\n\nSi vous optez, positivement ou négativement, pour plus d'un critère concernant une colonne, vous pouvez utiliser `%in%`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  filter(species %in% c(\"Human\", \"Droid\"), # humans and droids\n         !(hair_color %in% c(\"brown\", \"blond\"))) # NO brown or blond hair\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 25 x 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 C-3PO       167  75   <NA>       gold       yellow         112   none  mascu~\n 2 R2-D2        96  32   <NA>       white, bl~ red             33   none  mascu~\n 3 Darth V~    202 136   none       white      yellow          41.9 male  mascu~\n 4 Owen La~    178 120   brown, gr~ light      blue            52   male  mascu~\n 5 R5-D4        97  32   <NA>       white, red red             NA   none  mascu~\n 6 Biggs D~    183  84   black      light      brown           24   male  mascu~\n 7 Obi-Wan~    182  77   auburn, w~ fair       blue-gray       57   male  mascu~\n 8 Wilhuff~    180  NA   auburn, g~ fair       blue            64   male  mascu~\n 9 Palpati~    170  75   grey       pale       yellow          82   male  mascu~\n10 Boba Fe~    183  78.2 black      fair       brown           31.5 male  mascu~\n# i 15 more rows\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\n## `mutate` : pour créer de nouvelles colonnes\n\nBien utile pour calculer l'indice de masse corporelle de ce beau monde par exemple :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  select(name, height, mass, species) %>% \n  mutate(bmi=mass/((height/100)^2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 x 5\n   name               height  mass species   bmi\n   <chr>               <int> <dbl> <chr>   <dbl>\n 1 Luke Skywalker        172    77 Human    26.0\n 2 C-3PO                 167    75 Droid    26.9\n 3 R2-D2                  96    32 Droid    34.7\n 4 Darth Vader           202   136 Human    33.3\n 5 Leia Organa           150    49 Human    21.8\n 6 Owen Lars             178   120 Human    37.9\n 7 Beru Whitesun Lars    165    75 Human    27.5\n 8 R5-D4                  97    32 Droid    34.0\n 9 Biggs Darklighter     183    84 Human    25.1\n10 Obi-Wan Kenobi        182    77 Human    23.2\n# i 77 more rows\n```\n\n\n:::\n:::\n\n\nVous pouvez utiliser \"immédiatement\" une colonne créé par `mutate`. C'est tellement beau :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsw <- starwars %>% \n  select(name, height, mass, species) %>% \n  mutate(height=height/100, bmi=mass/height^2) \nsw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 x 5\n   name               height  mass species   bmi\n   <chr>               <dbl> <dbl> <chr>   <dbl>\n 1 Luke Skywalker       1.72    77 Human    26.0\n 2 C-3PO                1.67    75 Droid    26.9\n 3 R2-D2                0.96    32 Droid    34.7\n 4 Darth Vader          2.02   136 Human    33.3\n 5 Leia Organa          1.5     49 Human    21.8\n 6 Owen Lars            1.78   120 Human    37.9\n 7 Beru Whitesun Lars   1.65    75 Human    27.5\n 8 R5-D4                0.97    32 Droid    34.0\n 9 Biggs Darklighter    1.83    84 Human    25.1\n10 Obi-Wan Kenobi       1.82    77 Human    23.2\n# i 77 more rows\n```\n\n\n:::\n:::\n\n\n`mutate` est un outil très puissant pour mettre de l'ordre et nettoyer vos jeux de données. Pour les facteurs et les chaînes de caractères, il se marie à merveille avec les fonctions de `forcats` et `stringr` respectivement. Minute papillon, nous les verrons un peu plus tard. \n\nAvant de quitter `mutate`, sa variante `transmute` crée de nouvelles colonnes et omet toutes les autres :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  transmute(name, sex, height=height/100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 x 3\n   name               sex    height\n   <chr>              <chr>   <dbl>\n 1 Luke Skywalker     male     1.72\n 2 C-3PO              none     1.67\n 3 R2-D2              none     0.96\n 4 Darth Vader        male     2.02\n 5 Leia Organa        female   1.5 \n 6 Owen Lars          male     1.78\n 7 Beru Whitesun Lars female   1.65\n 8 R5-D4              none     0.97\n 9 Biggs Darklighter  male     1.83\n10 Obi-Wan Kenobi     male     1.82\n# i 77 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## `arrange` : trier les lignes\n\nUn verbe très pratique pour trier les données :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsw %>% \n  arrange(bmi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 x 5\n   name          height  mass species      bmi\n   <chr>          <dbl> <dbl> <chr>      <dbl>\n 1 Wat Tambor      1.93    48 Skakoan     12.9\n 2 Padmé Amidala   1.85    45 Human       13.1\n 3 Adi Gallia      1.84    50 Tholothian  14.8\n 4 Sly Moore       1.78    48 <NA>        15.1\n 5 Roos Tarpals    2.24    82 Gungan      16.3\n 6 Lama Su         2.29    88 Kaminoan    16.8\n 7 Jar Jar Binks   1.96    66 Gungan      17.2\n 8 Ayla Secura     1.78    55 Twi'lek     17.4\n 9 Shaak Ti        1.78    57 Togruta     18.0\n10 Barriss Offee   1.66    50 Mirialan    18.1\n# i 77 more rows\n```\n\n\n:::\n:::\n\n\nIci, par d'ex aequo sur la colonne `bmi` mais on aurait pu ajouter une autre colonne dans `arrange` en cas d'égalité.\n\nPour trier par ordre descendant, il nous faut ajouter `desc` pour que les plus voluptueux passe en premier. Notez Yoda en troisième position. Ça c'est de la science, pas de la fiction. En vrai, cela questionne aussi (sans doute) le _domaine de validité_ du BMI.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsw %>% arrange(desc(bmi))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 x 5\n   name                  height  mass species          bmi\n   <chr>                  <dbl> <dbl> <chr>          <dbl>\n 1 Jabba Desilijic Tiure   1.75  1358 Hutt           443. \n 2 Dud Bolt                0.94    45 Vulptereen      50.9\n 3 Yoda                    0.66    17 Yoda's species  39.0\n 4 Owen Lars               1.78   120 Human           37.9\n 5 IG-88                   2      140 Droid           35  \n 6 R2-D2                   0.96    32 Droid           34.7\n 7 Grievous                2.16   159 Kaleesh         34.1\n 8 R5-D4                   0.97    32 Droid           34.0\n 9 Jek Tono Porkins        1.8    110 <NA>            34.0\n10 Darth Vader             2.02   136 Human           33.3\n# i 77 more rows\n```\n\n\n:::\n:::\n\n\n\nVous pourriez être tentée de combiner `arrange` puis `slice` pour ne retenir que les `n` plus (ou moins) quelque chose :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsw %>% \n  arrange(desc(bmi)) %>% \n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 5\n  name                  height  mass species          bmi\n  <chr>                  <dbl> <dbl> <chr>          <dbl>\n1 Jabba Desilijic Tiure   1.75  1358 Hutt           443. \n2 Dud Bolt                0.94    45 Vulptereen      50.9\n3 Yoda                    0.66    17 Yoda's species  39.0\n4 Owen Lars               1.78   120 Human           37.9\n5 IG-88                   2      140 Droid           35  \n```\n\n\n:::\n:::\n\n\n\nMais peut-être préférerez vous l'alternative compacte de `slice_*` et pièces rattachées :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsw %>% slice_max(bmi, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 5\n  name                  height  mass species          bmi\n  <chr>                  <dbl> <dbl> <chr>          <dbl>\n1 Jabba Desilijic Tiure   1.75  1358 Hutt           443. \n2 Dud Bolt                0.94    45 Vulptereen      50.9\n3 Yoda                    0.66    17 Yoda's species  39.0\n4 Owen Lars               1.78   120 Human           37.9\n5 IG-88                   2      140 Droid           35  \n```\n\n\n:::\n:::\n\n\n## `count` : compter des lignes sur des critères en colonnes\n\nPour obtenir des résumés, vous pouvez utiliser `count` qui rajouter une colonne qui peut se révéler fort utile :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  count(species, name=\"N\") %>% # if you omit `name`, count create `n` by default\n  arrange(desc(N)) %>% \n  slice_head(n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 2\n  species      N\n  <chr>    <int>\n1 Human       35\n2 Droid        6\n3 <NA>         4\n4 Gungan       3\n5 Kaminoan     2\n```\n\n\n:::\n:::\n\n\nEt si vous voulez garder les autres colonnes, `add_count` est votre nouveau copain :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  select(name, sex, species) %>% \n  add_count(species) %>% \n  filter(n >= 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 x 4\n   name               sex    species     n\n   <chr>              <chr>  <chr>   <int>\n 1 Luke Skywalker     male   Human      35\n 2 C-3PO              none   Droid       6\n 3 R2-D2              none   Droid       6\n 4 Darth Vader        male   Human      35\n 5 Leia Organa        female Human      35\n 6 Owen Lars          male   Human      35\n 7 Beru Whitesun Lars female Human      35\n 8 R5-D4              none   Droid       6\n 9 Biggs Darklighter  male   Human      35\n10 Obi-Wan Kenobi     male   Human      35\n# i 38 more rows\n```\n\n\n:::\n:::\n\n\n\n## `summarise` : résumés et résumés groupés\n\nCréeons d'abord un mini starwars, sur lequel nous allons supprimer les lignes avec des données manquantes pour la colonne `ehight` puis illustrons les vertus de `summary` :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsw <- starwars %>% \n  select(species, sex, height) %>% \n  filter(species %in% c(\"Human\", \"Droid\"), !is.na(height))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsw %>% summarise(height=mean(height))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 x 1\n  height\n   <dbl>\n1   171.\n```\n\n\n:::\n:::\n\n\n\nPas dingue hein. Peut être qu'un résumé par espèce et par sexe serait plus intéressant ? `group_by` est votre allié. On peut rajouter d'autres fonctions de résumé au passage :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsw %>% \n  group_by(species, sex) %>% \n  summarise(mean_height=mean(height),\n            sd_height=sd(height))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 4\n# Groups:   species [2]\n  species sex    mean_height sd_height\n  <chr>   <chr>        <dbl>     <dbl>\n1 Droid   none          131.     49.1 \n2 Human   female        164.     11.9 \n3 Human   male          182.      8.16\n```\n\n\n:::\n:::\n\n\n\n`accross` est très utile ici pour résumer plusieurs colonnes, éventuellement avec plusieurs fonctions de résumé :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% \n  select(species, height, mass) %>% \n  na.omit() %>% \n  filter(species %in% c(\"Human\", \"Droid\")) %>% \n  group_by(species) %>%\n  summarise(across(c(height, mass), list(mean=mean, sd=sd), .names = \"{.col}_{fn}\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 x 5\n  species height_mean height_sd mass_mean mass_sd\n  <chr>         <dbl>     <dbl>     <dbl>   <dbl>\n1 Droid          140       52.0      69.8    51.0\n2 Human          180.      11.5      81.3    19.3\n```\n\n\n:::\n:::\n\n\n## `join` : combiner des tables\n\nEn analyse de données, nous avons souvent des tables à réunir via une colonne commune (par exemple un `id`). La famille de `join` est précieuse. \n\nNous allons utiliser deux petits jeux de données disponibles avec `dplyr`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 2\n  name  band   \n  <chr> <chr>  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n```\n\n\n:::\n\n```{.r .cell-code}\nband_instruments\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n```\n\n\n:::\n:::\n\n\nNous pouvons combiner ces tables avec `left_join` et ses variantes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(band_members, band_instruments, by=\"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n```\n\n\n:::\n\n```{.r .cell-code}\nright_join(band_members, band_instruments, by=\"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith <NA>    guitar\n```\n\n\n:::\n\n```{.r .cell-code}\nfull_join(band_members, band_instruments, by=\"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith <NA>    guitar\n```\n\n\n:::\n:::\n",
    "supporting": [
      "dplyr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}