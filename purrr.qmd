# Manipulation de listes avec `purrr`

Si vous n'avez besoin que de `purrr`, `library(purrr)` charge le package. Si vous utilisez tout le tidyverse, `purrr` sera chargée après :

```{r,  message=FALSE}
library(tidyverse)
```

## Les listes c'est la vie

```{r}
z <- list(wagon1="pomme", wagon2=1:3, wagon3=c(TRUE, FALSE))
length(z)
names(z)
str(z)    # structure of z
# View(z) # RStudio Viewer
z         # simple print method
```
Ne soyez pas effrayé·e par les listes : elles sont simplement des conteneurs pouvant accueillir des objets de classes différentes (ou non) et de longueur différentes (ou non). 

On peut se figurer une liste comme un train dont les éléments seraient des wagons dont chacun contiendrait des conteneurs plus petits qui eux contiennent des éléments :

```
  --  wagon 1  --        --  wagon 2  --       --  wagon 3  --
[    ["pomme"]    ] -- [    [ 1:3 ]     ] - [    [ c(TRUE, FALSE) ]    ]
```

Une liste s'indexe de plusieurs façons, positionnellement ou avec le nom de se(s) élément(s)-wagons s'ils sont nommés :

```{r}
z[2]        # using positionnal index
z["wagon2"] # using ["name"]
class(z[2])
```
Notons que la syntaxe `z$wagon2` fonctionne aussi.

Si l'on utilise les doubles crochets, on accède directement au contenu des caisses dans les wagons. Ces derniers ont perdu leurs natures de "wagon", ne sont plus des listes :

```{r}
z[[2]]        # using positionnal index
z[["wagon2"]] # using ["name"]
class(z[[2]])
```

Les assignations `list[index] <-` et `list[[index]] <-` fonctionnent comme à l'acoutumée.


## `map` à la vanille

Le package `purrr` s'articule autour de la famille `map` dont il existe plusieurs variantes dont la première à voir est `map` tout court. 

L'idée est simple : appliquer une fonction à tous les éléments d'une liste et retourner une liste. La liste sera le premier argument de `map`, la fonction le second. Le nom de fonction est passé sans parenthèses :

```{r}
map(z, class)
```
## `map_*` et ses autres parfums

Dans l'exemple ci-dessus, si l'on ne veut pas de liste mais un vecteur (quand cela est possible), on peut utiliser `unlist` :

```{r}
z %>% map(class) %>% unlist()
```

Mais quand la classe de sortie d'une fonction map est homogène et connue, on utilisera plutôt les variantes de map de la forme `map_*`. `*` pouvant prendre les valeurs `int` et `dbl` pour retourner des `numeric` sous forme d'entiers ou de doubles, `lgl` pour les vectuers logiques, `df`, `dfr` et `dfc` pour retourner des `data.frame`, éventuellement combinés par `r`ow ou `c`olonnes.

```{r}
z %>% map_chr(class)
list(1:2, 4:9) %>% map_dbl(length)
```

## `~` et `\(x)` : les fonctions anonymes sont vos amies

Dans `purrr` et plus largement dans le tidyverse, on peut déclarer des fonctions anonymes, "à la volée" c'est à dire qu moment où l'on en a besoin. `purrr` mobilise l'opérateur `~` et la variable `.x`. 

R "de base" a repris l'idée dans une saveur un peu différente avec `\(x)`. Ces trois approches sont équivalentes :
```{r}
x <- 1:5 # create a vector
# option 1 : using a named function
square <- function(x) x^2
map_dbl(x, square)
# option 2 : purrr style anonymous function
map(x, ~.x^2)    
# option 3 : R base anonymous function
map(x, \(x) x^2)  
```


## `map2` et généralisation `pmap`

Imaginons que vous ayez deux listes `z1` et `z2` et que chaque élément de `z1` doivent être élevé à la puissance de chaque élément de `z2`. `purrr` généralise `map` avec deux listes avec les fonctions `map2_*` :

```{r}
z1 <- list(4:5, c(3, 2, 4.25), 1:3)
z2 <- list(2, 1, 3)
map2(z1, z2, \(x, y) x^y)
```

Si vous avez plus de trois listes, vous pouvez utiliser `pmap_`, comme suit. Le premier argument sera une liste de toutes vos listes. Imaginons qu'après avoir élevé à la puissance de `z2` nous voulions ajouter une valeur dans `z3` :

```{r}
z3 <- list(10, -5, 0)
pmap(list(z1, z2, z3), \(x, y, z) x^y + z)
```

## Opérations sur listes

## cheat sheet
