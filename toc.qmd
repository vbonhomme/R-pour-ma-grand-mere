## Préambule

-   Qu'est-ce que R ?

-   Installer un environnement R

-   R, R GUI, RStudio

-   Forces et faiblesses de R

    -   Frustration is typical and temporary. (Hadley Wickham)

    -   Pente d'apprentissage mais amortissement : skill \~ time

    -   Console but R-Studio

    -   Plus que gratuit, c'est libre

    -   Amazing ressources and support (si pb dans les 3 premières années c'est à 99.9% que la question est mal posée)

    -   Reproducible research

    -   6000+ packages (1000+ yr-1) (drinkR + "Gourmet R library")

    -   Apprendre R c'est apprendre les statistiques

    -   Apprendre R c'est apprendre à programmer

    -   It's not only about doing fancy things with a computer, it's a matter of your freedom as scientists.

    -   R console header


## Premiers pas avec R

## R-Studio (1/2h)

-   R Studio
    -   Premier contact
    -   Script
    -   Run, Source
    -   Apparence
    -   `<Tab>`
-   Bonnes pratiques
    -   Indentation
    -   Commentaires
    -   Sauvegarde versus reproductibilité
    
Un mot à propos de l'anglais : R cause anglais et je vous conseille deux choses : i) de le laisser en anglais, pour pouvoir plus facilement chercher de l'aide le cas échéant et ii) pour pouvoir collaborer plus facilement. Nous y reviendrons.


## Matrices et data frames (2h)

-   Première matrice
    -   `?matrix`
    -   exercices
-   Indexation 1d+
    -   `rownames`, `colnames`
    -   `dim`, `nrow`, `ncol`
    -   `paste`, `paste0`
    -   `rbind`, `cbind`
    -   `apply`
    -   `colSums`, `rowSums`
    -   indexation 2d, 3d, etc.
-   Data frames
    -   `data.frame` création
    -   `data(iris)`
    -   `iris`, `?iris`, `?datasets`
    -   `$`
    -   `head`, `tail`
    -   `apply`, `summary`
-   `NA`, `na.omit`
-   Un mot sur les listes

## Stats inférentielles 101 (2h)

-   `cov`, `cor`
-   Variance : $s^{2}$ ou $V(x)$ et se calcule avec $\frac{1}{n} \sum_{i=1}^n(x_i-\bar{x})^2$. Cet estimateur est biaisé ; une version non-biaisée est obtenue est divisant par $\frac{1}{n-1}$ et se note généralement $\sigma^{2}$.
-   Écart-type est la racine-carrée de la variance, soit $\sqrt{\sigma^{2}}$.
-   Covariance : mesure du *sens* de variation de deux variables aléatoire. Si positive, quand l'une augment, l'autre aussi, et vice-versa. Dépend de la variance des deux variables. Elle se calcule par : $\operatorname{cov}(x,y)\equiv \mathbb E[(x-\mathbb E[x])\,(y-\mathbb E[y])]$. L'espérance utilisée par R est non biaisée, et n'est pas exactement équivalente à la moyenne. Pour l'obtenir, il faut prendre la somme des valeurs, divisée par leur nombre moins un($\sum_{i=1}^n([x_i-\bar{x})(y_i-\bar{y})] / (n-1)$).
-   Corrélation : covariance normalisée par les variances des deux variables. Le coefficient de corrélation, est ainsi compris entre -1 et 1 et indique (imparfaitement) quelle proportion de la variance de l'une des deux variables peut être expliquée par l'autre. Il se calcule par : $\rho = \frac{cov_{xy}}{ \sigma_x \sigma_y}$.

```         
plot(Sepal.Length ~ Petal.Length, data=iris, xlim=c(0, 8), ylim=c(0, 8))
mod1 <- lm(Sepal.Length ~ Petal.Length, data=iris)
summary(mod1)
abline(mod1)

mod2 <- lm(Sepal.Length ~ Petal.Length - 1, data=iris)
summary(mod2)
abline(mod2, col="red")


mod3 <- lm(Sepal.Length ~ Petal.Length %in% Species - 1, data=iris)
summary(mod3)
abline(a=0, b=coefficients(mod3)[1])
```

## Graphics (base) (3h)

-   `plot` and `pairs`
-   `example`
-   `plot`, `boxplot`, `hist`, `barplot` + `formula`
-   `plot(iris)`
    -   `pch`, `col`, `cex`
    -   `plot` on iris
    -   `xlim`, `ylim`, `asp`, `log`
    -   `xlab`, `ylab`, `main`, `sub`
    -   `axes`, `axis`
-   Colors, `colorRampPalette`
-   `legend`
-   Primitives graphiques : `lines`, `segments`, `arrows`, `points`, `text`
-   `las`, `lg`, `mar`, `mfrow`, `?par`
-   `layout`
-   `dev.off`
-   `pdf`

## Graphics (ggplot2) (2h)

-   `ggplot2`
    -   grammaire graphes + objects
    -   `qplot(Sepal.Length, Sepal.Width, col=Species, data=iris)`
    -   `ggplot`, `data`, `aes`
    -   `ggplot(iris, aes(x=Petal.Length, y=Petal.Width, col=Species)) + geom_point() +  stat_smooth(method="lm")`

## Survivre à ses données (2h)

-   `apply`, `lapply`, `tapply`, `sapply`
-   `by`, `with`
-   pure indicing, `subset`, `dplyr`
-   Logicals : `==`, `!=`, `>`, `>=`, `<=`, `<`, `&`, `|`, `%in%`
-   Exercises
-   Packages
    -   kézaco
    -   exemples: `rgl`
    -   `library(dplyr)`
    -   `select`, `starts_with()`
    -   `filter`
    -   `arrange`
    -   `mutate`
    -   `summarize`, `group_by`
-   `magrittr`
-   Import/Export de données
    -   Préparation données\
    -   `read.table`, `write.table`
    -   Import datasets avec RStudio
    -   `NA` handling
    -   `na.rm`, `is.na`, `na.omit`

## Eléments de programmation (3h)

-   `function()`, `function`
-   `standardize`
-   `arguments`
-   Control flow
    -   `if`, `else`
    -   `{ }`
    -   `ifelse`
    -   intern variables, environment
    -   `cat`
    -   `append`, `c`vs. `declaration`
-   `return`
-   `for`
-   `while`

## Packages (1/2h)

-   Packages \* Kézaco ? \* CRAN's [Task Views](http://r-pkgs.had.co.nz/) \* CRAN's [repository](http://cran.r-project.org/) \* GitHub

## One step beyond (1/2h)

-   Bonnes pratiques \* scripts, projets, portabilité et reproductibilité, folder unique \* coder générique, fonctions, ne pas se répéter, `source` \* style code, commenter \* écrire un package [r-pkgs](http://r-pkgs.had.co.nz/)
-   Progresser : lire, pratiquer, échouer mille fois, échanger
-   Documents dynamiques
-   Applications Shiny
